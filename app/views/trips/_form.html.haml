:ruby
  @is_repeating_trip = @trip.is_a? RepeatingTrip
  @trip_id = @trip ? @trip.id : nil

= render 'shared/highlight_active_tab_js', is_primary_nav: true, tab_class: 'trips'
- edit_mode = :edit if !defined? edit_mode
= form_for @trip,
  html: { class: 'trip_form', "data-remote" => @remote } do |f|
  = hidden_field_tag :from_dispatch, params[:from_dispatch]
  = hidden_field_tag :run_id, params[:run_id]
  - if @is_repeating_trip
    = render 'repeating_trips/form_header', edit_mode: edit_mode, f: f
  - else
    = render 'trips/form_header', edit_mode: edit_mode, f: f

  - if @trip.errors.any?
    #error_explanation
      %h2= translate_helper("trip_form_error_message", count: @trip.errors.count)

      %ul
        - @trip.errors.full_messages.each do |msg|
          %li= msg

  -# the customer id needs to be passed in this action
  = f.hidden_field :customer_id, class: 'trip-customer-id'
  - unless @is_repeating_trip
    = f.hidden_field :direction
    = hidden_field_tag "trip[outbound_trip_id]", @trip.outbound_trip.try(:id)

  - if @is_repeating_trip 
    .col-sm-12.col-md-6
      = render 'trips/required_trip_details_panel', f: f, edit_mode: edit_mode
      = render 'trips/notes_panel', f: f, edit_mode: edit_mode
      = render 'trips/trip_parameters_panel', f: f, edit_mode: edit_mode
    .col-sm-12.col-md-6
      = render 'repeating_trips/repetition_panel', f: f
      = render 'trips/tracking_panel', f: f, edit_mode: edit_mode 
      = render 'trips/eligibility_accommodation_panel', f: f, edit_mode: edit_mode
      = render 'trips/other_panel', f: f
      - if edit_mode == :show
        - logs = TrackerActionLog.for(@trip).order(created_at: :desc)
        - if logs.any?
          = render 'shared/action_log_panel', logs: logs
  - else
    .col-sm-12.col-md-6
      = render 'trips/required_trip_details_panel', f: f, edit_mode: edit_mode
      = render 'trips/notes_panel', f: f, edit_mode: edit_mode
      = render 'trips/trip_parameters_panel', f: f, edit_mode: edit_mode
    .col-sm-12.col-md-6
      = render 'trips/tracking_panel', f: f, edit_mode: edit_mode 
      = render 'trips/eligibility_accommodation_panel', f: f, edit_mode: edit_mode
      = render 'trips/other_panel', f: f
      - if edit_mode == :show
        - logs = TrackerActionLog.for(@trip).order(created_at: :desc)
        - if logs.any?
          = render 'shared/action_log_panel', logs: logs

- if edit_mode != :show
  = render 'trips/customer_trip_summary_dialog'
  - if @is_repeating_trip
    :javascript
      $(function() {
        $('body').on('dblclick', '#customerTripSummaryTable td', function() {
          var trip_id = $(this).parents('tr').data('trip-id');
          window.location.href = "#{clone_from_daily_trip_repeating_trips_path}?trip_id=" + trip_id;
        });
      });
  - else
    :javascript
      $(function() {
        $('body').on('dblclick', '#customerTripSummaryTable td', function() {
          var trip_id = $(this).parents('tr').data('trip-id');
          window.location.href = "#{clone_trip_path('xxx')}".replace('xxx', trip_id);
        });
      });

- if @is_repeating_trip
  = render 'shared/hide_invisible_form_fields_js', model_name: "repeatingtrip", table_name: 'repeating_trips', provider_id:  current_provider.try(:id)
- else
  = render 'shared/hide_invisible_form_fields_js', model_name: "trip", table_name: 'trips', provider_id:  current_provider.try(:id)

- if @trip.run && !@trip.new_record?
  :javascript
    function check_run_disruption(callback) {
      console.log('checking...');
      var attrs = [];

      if($('#trip_customer_id').val() != "#{@trip.customer_id}") {
        attrs.push('customer');
      }

      var original_date = moment("#{@trip.date.to_s}");
      var new_date = moment($('#trip_date').val());
      
      if(new_date - original_date != 0) {
        attrs.push('date');
      }

      var today_str = moment(new Date()).format('YYYY-MM-DD');
      var original_pickup_time = moment(today_str + " #{@trip.pickup_time.try(:to_s, :time_only)}");
      var new_pickup_time = moment(today_str + " " +$('#trip_pickup_time').val());
      if(new_pickup_time - original_pickup_time != 0) {
        attrs.push('pickup time');
      }

      var original_appointment_time = moment(today_str + " #{@trip.appointment_time.try(:to_s, :time_only)}");
      var new_appointment_time = moment(today_str + " " + $('#trip_appointment_time').val());
      if(new_appointment_time - original_appointment_time != 0) {
        attrs.push('appointment time');
      }

      if($('#trip_pickup_address_id').val() != "#{@trip.pickup_address_id}") {
        attrs.push('pickup address');
      }
      if($('#trip_dropoff_address_id').val() != "#{@trip.dropoff_address_id}") {
        attrs.push('dropoff address');
      }
      if($('#trip_mobility_id').val() != "#{@trip.mobility_id}") {
        attrs.push('mobility');
      }
      if($('#trip_guest_count').length > 0 && $('#trip_guest_count').val() != "#{@trip.guest_count}") {
        attrs.push('guest size');
      }
      if($('#trip_attendant_count').length > 0 && $('#trip_attendant_count').val() != "#{@trip.attendant_count}") {
        attrs.push('attendant size');
      }
      if($('#trip_group_size').length >0 && $('#trip_group_size').val() != "#{@trip.group_size}") {
        attrs.push('group size');
      }
      if($('#trip_mobility_device_accommodations').val() != "#{@trip.mobility_device_accommodations}") {
        attrs.push('mobility device count');
      }

      if(attrs.length == 0) {
        if(callback) {
          callback();
        }
      } else {
        bootbox.confirm("<b>Changes in following fields (<span style='color: red;'>" + attrs.join(', ') + "</span>) are likely to disrupt the run and the trip would be unscheduled. Are you sure to continue?</b>", function(result) {
          if(result) {
            if(callback) {
              callback();
            }
          }
        });
      }
    }

- if @trip.is_return? && @trip.run && !@trip.new_record?
  :javascript
    $(function() {
      $('.trip_form').submit(function(e) {
        var form = this;
        e.preventDefault();
        var callback = function() {
          form.submit();
        };
        // first check run disruption warning
        if(typeof check_run_disruption != 'undefined') {
          check_run_disruption(callback);
        } else {
          callback();
        }
      });
    });

- if !@is_repeating_trip && !@trip.is_return?
  = render partial: 'trips/double_booked_trip_dialog'
  :javascript
    $(document).ready(function(){

      var doubleBookedTripRowHtml = "#{escape_javascript(render partial: 'double_booked_trip_row')}"
      var dbh = new DoubleBookedTripsHelper({
        tableRowHtml: doubleBookedTripRowHtml,
        url: "#{check_double_booked_trips_path}",
        form: $('form.trip_form'),
        modal: $('#doubleBookedTripDialog'),
        table: $('#doubleBookedTripDialog #double-booked-trips-table')
      });

      // On form submit, check for potential double-booking before submitting form
      dbh.form.submit(function(e) {
        var form = this;
        e.preventDefault();
        var callback = function() {
          var requestBody = dbh.requestBodyFromForm(#{@trip_id || 'null'});

          dbh.checkDoubleBooked(requestBody, function(data) {
            // If double booking exists, alert user and let them cancel or continue
            if(data.trips.length > 0) {
              dbh.populateTable(data.trips);
              dbh.showModal();
              // If modal submit button is clicked, submit form.
              dbh.modal.find('.submit-double-book-modal').click(function() {
                form.submit();
              });
            // Else, submit form
            } else {
              form.submit();
            }
          });
        }

        // first check run disruption warning
        if(typeof check_run_disruption != 'undefined') {
          check_run_disruption(callback);
        } else {
          callback();
        }
        
      });
    });

= render 'shared/time_inputs_javascript' if edit_mode != :show
